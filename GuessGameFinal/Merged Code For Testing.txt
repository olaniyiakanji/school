import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class Main {
    static Scanner scanner = new Scanner(System.in);
    static boolean exit = true;
    public static int numberScores = 0;
    public static int alphabetScores = 0;

    public static int numberChances = 0;
    public static int alphabetChances = 0;


    public static void main(String[] args) {
        Random random = new Random();
        star();
    }

    public static void star() {
        System.out.println("Welcome to the Guessing Game!");
        System.out.println("1. Guess the Number.");
        System.out.println("2. Guess the Alphabet");
        System.out.println("3. My Score.");
        System.out.println("4. Credit.");
        System.out.println("5. Exit");
        System.out.print("Choose an option please!:\n");

        int option = 0;
        boolean invalidInput = false;
        do {
            try {
                option = scanner.nextInt();
                invalidInput = false;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input! Please enter a number between 1 and 5:");
                scanner.nextLine(); // clear the input buffer
                invalidInput = true;
            }

            if (!invalidInput) {
                switch (option) {
                    case 1 -> {
                        Guess guessNumber = new GuessNumber();
                        guessNumber.difficultyLevel();
                    }
                    case 2 -> {
                        Guess guessAlpha = new GuessAlpha();
                        guessAlpha.difficultyLevel();
                    }
                    case 3 -> {
                        if (Guess.numberPlayed) {
                            System.out.println("Number's Best Score: " + Main.numberScores + "\n");
                            System.out.println("Least Chances Used: " + numberChances + "\n");
                        } else {
                            System.out.println("Number's Best Score: Not Played \n");
                            System.out.println("Least Chances Used: \n");
                        }
                        if (Guess.alphabetPlayed) {
                            System.out.println("Alphabet Best Score: " + Main.alphabetScores + "\n");
                            System.out.println("Least Chances used: " + alphabetChances + "\n");
                        } else {
                            System.out.println("Alphabet's Best Score: Not Played\n");
                            System.out.println("Least Chances Used:\n");
                        }
                        
                        Guess.delay(4000);
                        star();

                    }
                    case 4 -> {
                        System.out.println("""
                                 Created by [ Abdelrahman & Abdalla ]
                                 Course of Study:Software Construction.\n""");
                        Guess.delay(4000);
                        star();

                    }
                    case 5 -> {
                        System.out.println("Thanks for playing!");
                        System.exit(0);
                    }
                    default -> {
                        System.out.println("Please try again.");
                        Guess.delay(3000);
                    }
                }
            }
        } while (invalidInput || option < 1 || option > 5);
    }
}

import java.util.Random;
import java.util.Scanner;

public class GuessNumber extends Guess {
    private int userNum;
    private int answer;
    private final Scanner scanner = super.scanner;
    private final Random random = super.random;
    public GuessNumber() {
        super();
        System.out.println("Instructions:\n" +
                " 1. Guess the number based on the given range.\n" +
                " 2. You are allowed to make one guess at a time.\n" +
                " 3. Difficulty will detrmines the chances & the Hints.\n" +
                " 4. If you use your Chances, you lose the game.");
               
        delay(4000);
           }

    public int getUserNum() {
        return userNum;
    }

    public void setUserNum(int userNum) {
        this.userNum = userNum;
    }

    public int getAnswer() {
        return answer;
    }

    public void setAnswer(int answer) {
        this.answer = answer;
    }

    public int getChances() {
        return chances;
    }

    public void setChances(int chances) {
        this.chances = chances;
    }
    @Override
    public void difficultyLevel() {
        numberPlayed=true;
        while (Main.exit) {
            System.out.print("""
            Start Menu 
            ---------- 
            Select a difficulty level 
            1. Easy 
            2. Medium 
            3. Hard 
            4. Return to main menu 
            ===> 
            """);

            int choice = 0;
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
                continue;
            }

            if (choice == 1) {
                setChances(5);
                alphanumeric (15, "1-15");

            } else if (choice == 2) {
                setChances(4);
                alphanumeric (20, "1-20");

            } else if (choice == 3) {
                setChances(3);
                alphanumeric (40, "1-40");
            } else if (choice == 4) {
                Main.star();
            } else {
                System.out.println("Invalid choice. Please select a valid option.");
            }

            // consume the newline character
            scanner.nextLine();
        }
    }


    @Override
    public void alphanumeric (int range, String b) {

        setAnswer(random.nextInt(range) + 1);
        int score = 0;
        int tries = 0;
        boolean win = false;
        
        System.out.println("Guess the number between " + b);
        while (tries < getChances()) {
            System.out.println("tries left --> "+((tries-chances)*-1));
            try {
                setUserNum(scanner.nextInt());
            } catch (Exception e) {
                System.out.println("\"Non-Number character entered!\"");
                break;
            }


            if (getUserNum() == getAnswer()) {
                win = true;
                score += 10 - tries;
                break;
            }else if (range!=20) {
                if (getUserNum() < getAnswer()) {
                    System.out.println("Too low! Try again.");
                } else if (getUserNum() > getAnswer()) {
                    System.out.println("Too high! Try again.");
                }
            }
            tries++;
        }
        if (win) {
            System.out.println("Congratulations, you win!");
            System.out.println("You guessed the number in " + (tries + 1) + " attempts.");
        } else {
            System.out.println("Sorry, you lost!");
            System.out.println("The secret number was " + getAnswer());
        }
        Main.numberChances=tries+1;
        Main.numberScores += score;
        delay(4000);
    }
}

import java.util.Random;
import java.util.Scanner;

public class GuessAlpha extends Guess {
    private char userAlpha;
    private char answer=(char) getAnswer();
    private final Scanner scanner = super.scanner;
    private final Random random = super.random;
    String vowelsSound;
    String consonantVowels;
    public GuessAlpha() {
        super();
        System.out.println("""
                Instructions:
                 1. Guess the alphabet based on the given range.
                 2. You are allowed to make one guess at a time.
                 3. Each game has 5 chances to guess the correct alphabet.
                 4. If you use your Chances, you lose the game.""");
        delay(4000);
    }

    public char getUserAlpha() {
        return userAlpha;
    }

    public void setUserAlpha(char userAlpha) {
        this.userAlpha = userAlpha;
    }

    public char getAnswer() {
        return answer;
    }

    public void setAnswer(char answer) {
        this.answer = answer;
    }
    public int getChances() {
        return chances;
    }

    public void setChances(int chances) {
        this.chances = chances;
    }
    @Override
    public void difficultyLevel() {
        alphabetPlayed=true;
        while (Main.exit) {
            System.out.println("""
                    Start Menu 
                    ---------- 
                    Select a difficulty level 
                    1. Easy 
                    2. Medium 
                    3. Hard 
                    4. Return to main menu 
                    ===>
                    """);
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    setChances(2);
                    vowelsSound = "aeiou";

                    alphanumeric (vowelsSound.length(), "Guess the vowel alphabet.");
                    break;
                case 2:
                    setChances(4);
                    consonantVowels ="bcdfghjklmnpqrstvwxyz";
                    alphanumeric (consonantVowels.length(), "Guess the consonant alphabet");
                    break;
                case 3:
                    setChances(5);
                    alphanumeric (26, "Guess the alphabet");
                    break;
                case 4:
                    Main.star();
                    break;
                default:
                    System.out.println("Invalid choice, please try again.");
                    break;
            }
        }
    }
    @Override
    public void alphanumeric (int length, String b) {
        switch (length){
            case 5->{setAnswer(vowelsSound.charAt(random.nextInt(length)));}
            case 21->{setAnswer(consonantVowels.charAt(random.nextInt(length)));}
            case 26->{ setAnswer((char) (random.nextInt(length) + 'a'));}
        }

        int score = 0;
        int tries = 0;
        boolean win = false;
        System.out.println("Guess the Alphabet! " + b);
        while (tries < chances) {
            System.out.println("tries left --> "+((tries-chances)*-1));

            setUserAlpha(scanner.next().charAt(0));
            if (!Character.isLetter(getUserAlpha())) {
                System.out.println("Non-alphabetic character entered!");
                break;
            }

            if (getUserAlpha() == getAnswer()) {
                win = true;
                score = 10 - tries;
                break;
            } else if (getUserAlpha() < getAnswer()) {
                System.out.println("Too close! Try again.");
            } else {
                System.out.println("Too far! Try again.");
            }
            tries++;
        }
        if (win) {
            System.out.println("Congratulations, you win!");
            System.out.println("You guessed the alphabet in " + (tries + 1) + " attempts.");
        } else {
            System.out.println("Sorry, you lost!");
            System.out.println("The secret alphabet was " + getAnswer());
        }
        Main.alphabetChances=tries+1;
        Main.alphabetScores += score;
        delay(4000);
    }
}

import java.util.Random;
import java.util.Scanner;

public abstract class Guess {
    protected Scanner scanner;
    protected Random random;
    protected int chances;
    public static boolean numberPlayed=false;
    public static boolean alphabetPlayed=false;

    public Guess() {
        this.scanner = new Scanner(System.in);
        this.random = new Random();
    }


    public abstract void difficultyLevel();

    public void alphanumeric(int range, String b) {
        // Empty implementation
    }
    public static void delay(int Number){ try {

        Thread.sleep(Number);
    } catch (InterruptedException e) {

        e.printStackTrace();
    }}
}
